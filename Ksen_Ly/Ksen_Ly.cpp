// Ksen_Ly.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include "pch.h"
#include <iostream>
#include <string>
#include <list>
/*
Реализовать методы обработки текстовых формул. Формулы должны содержать математические операции сумма (вычитание = сумма числа с противоположным знаком),

умножение, деление. В качестве операндов математических формул выступают·

числа формата с плавающей запятой и знаком, причем разделитель дробной части может быть опущен( пример: 1, 1.2, -6.4, -4 );

· индексы процессов в массиве ProcessArray, индексы отделяются от числе специальным символом ( пример: $3, %11, &4 ).

Математические операции могут быть записаны в виде функций, например SUM(-5, $1),

что будет означать добавление -5 к каждому элементу массива ProcessArray[1].Data. 

Разделителем между операндами является символ ','. Пробелы не должны влиять на работоспособность формул.

Помимо формулы необходимо задать индекс процесса в массиве ProcessArray. Если Data==NULL, то необходимо выделить память.

В случае если calculated==true, то данные пересчитываются по новой формуле, в противном случае операция прерывается.
*/
struct Process
{
	float *Data; // данные процесса, в случае отсутствия данных Data==NULL
	bool calculated; // флаг, true в случае если данные вычислены по формуле
};
string out();
int main()
{
	setlocale(0, "RUS");
	const int N = 3;                        //Количество доступных процессов
	Process *ProcessArray = new Process[N];// Про исходные данные нам не говорят
	string str;                           // По этому будем предпологать, что у нас только три процесса
	                                     //Также будем считать, что первая цифра данных процеса указывает на количество значений 
                                        //Из этого следует, что у нас будет на одно значение больше 
	ProcessArray[0].Data = new float[6] {5, 1.1111, 11.488, 11, 0, 0.123};
	ProcessArray[1].Data = new float[6] {5, 56, 2.2222 , 23.1241, 1, 0 };
	ProcessArray[2].Data = new float[6] {5, -38 ,23,3.3333333333 ,0, 1};
	do {
		system("CLS");
		cout << "Для получения справки введите '-help'  \nВведите команду : \n";	
		str = out();
		if (str == "-Sum") {

			break;
		}
		if (str == "Div") {

			break;
		}
		if (str == "Multi") {

			break;
		}
	} while (str != "-exit");

}

string out() {
	string str;
	string s;
	getline(cin, s);
	char flag = ' ';
	for (int i = 0; i < s.size(); i++) {
		flag = s[i];
		if (flag != ' ')
			str += flag;
	}
	return str;
}


// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
